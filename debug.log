2024-07-19 11:57:16,716 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, folder='submissions', problem_folder_name='${question_id}-${title_slug}', no_problem_statement=False, problem_statement_filename='${question_id}-${title_slug}.md', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', only_accepted=True, only_last_submission=False, language_unprocessed=None, verbose=False, extra_verbose=False, language=None)
2024-07-19 11:57:16,716 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2024-07-19 11:58:18,050 [ERROR] leetcode.py:87 - Cookie format not valid. Expected: 'csrftoken=value1;LEETCODE_SESSION=value2;...'
2024-07-19 11:58:18,050 [ERROR] __main__.py:159 - Cookies not valid. Copy them from the Network tab of your browser by clicking on any leetcode.com request and going in Request Headers > cookie. Check README.md file for more information
2024-07-19 12:00:48,526 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, folder='submissions', problem_folder_name='${question_id}-${title_slug}', no_problem_statement=False, problem_statement_filename='${question_id}-${title_slug}.md', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', only_accepted=True, only_last_submission=False, language_unprocessed=None, verbose=False, extra_verbose=False, language=None)
2024-07-19 12:00:48,526 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2024-07-19 12:00:54,214 [DEBUG] connectionpool.py:1051 - Starting new HTTPS connection (1): leetcode.com:443
2024-07-19 12:00:55,318 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/11" 200 None
2024-07-19 12:00:55,334 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1326390849,"question_id":92,"lang":"python3","lang_name":"Python3","time":"1 hour, 36 minutes","timestamp":1721402670,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1326390849/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"16.7 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        #save head\n        dummy = ListNode(0, head)\n        leftPrev,  curr = dummy, head\n        #to get the node that starts the left\n        for _ in range(left-1):\n            leftPrev, curr= curr, curr.next  \n        prev = None\n        #reverse using length of a sublist\n        for _ in range(right-left+1):\n            next_node = curr.next\n            curr.next = prev\n            prev, curr = curr, next_node\n            \n        #change what the leftmost prev node points to and what the initial left points to\n        \n        leftPrev.next.next = curr\n        leftPrev.next = prev\n        \n        return dummy.next\n        ","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1}],"has_next":true,"last_key":"%7B%22pk%22%3A%20%7B%22N%22%3A%20%221326390849%22%7D%2C%20%22dt%22%3A%20%7B%22S%22%3A%20%222024-07-19T15%3A24%3A30.044399%2B0000%22%7D%2C%20%22sid%22%3A%20%7B%22N%22%3A%20%2214212730%22%7D%7D"}
2024-07-19 12:00:56,336 [DEBUG] leetcode.py:112 - User is logged in
2024-07-19 12:00:56,336 [INFO] leetcode.py:95 - Cookie set successful
2024-07-19 12:00:56,336 [INFO] __main__.py:166 - Output folder not found, creating it
2024-07-19 12:00:56,336 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2024-07-19 12:00:56,742 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/11" 200 None
2024-07-19 12:00:56,773 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1326390849,"question_id":92,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0hour, 36\xc2\xa0minutes","timestamp":1721402670,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1326390849/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"16.7 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\\n        #save head\\n        dummy = ListNode(0, head)\\n        leftPrev,  curr = dummy, head\\n        #to get the node that starts the left\\n        for _ in range(left-1):\\n            leftPrev, curr= curr, curr.next  \\n        prev = None\\n        #reverse using length of a sublist\\n        for _ in range(right-left+1):\\n            next_node = curr.next\\n            curr.next = prev\\n            prev, curr = curr, next_node\\n            \\n        #change what the leftmost prev node points to and what the initial left points to\\n        \\n        leftPrev.next.next = curr\\n        leftPrev.next = prev\\n        \\n        return dummy.next\\n        ","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1},{"id":1326388876,"question_id":92,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0hour, 38\xc2\xa0minutes","timestamp":1721402538,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1326388876/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\\n        #save head\\n\\n        leftPrev,  curr = head, head.next\\n        #to get the node that starts the left\\n        for _ in range(left-1):\\n            leftPrev, curr= curr, curr.next  \\n        prev = None\\n        #reverse using length of a sublist\\n        for _ in range(right-left+1):\\n            next_node = curr.next\\n            curr.next = prev\\n            prev, curr = curr, next_node\\n            \\n        #change what the leftmost prev node points to and what the initial left points to\\n        \\n        leftPrev.next.next = curr\\n        leftPrev.next = prev\\n        \\n        return head\\n        ","compare_result":"00000000000000000000000000000000000000000000","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1},{"id":1326386922,"question_id":92,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0hour, 40\xc2\xa0minutes","timestamp":1721402402,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1326386922/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\\n        #save head\\n\\n        leftPrev,  curr = None, head\\n        #to get the node that starts the left\\n        for _ in range(left-1):\\n            leftPrev, curr= curr, curr.next  \\n        prev = None\\n        #reverse using length of a sublist\\n        for _ in range(right-left+1):\\n            next_node = curr.next\\n            curr.next = prev\\n            prev, curr = curr, next_node\\n            \\n        #change what the leftmost prev node points to and what the initial left points to\\n        \\n        leftPrev.next.next = curr\\n        leftPrev.next = prev\\n        \\n        return head\\n        ","compare_result":"10000000000000000000000000000000000000000000","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1},{"id":1310778548,"question_id":2236,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1720204324,"status":10,"status_display":"Accepted","runtime":"341 ms","url":"/submissions/detail/1310778548/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"38.3 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def pairSum(self, head: Optional[ListNode]) -> int:\\n        #use fast and slow method to find the middle\\n        dummy = head\\n        fast = head\\n        slow = head\\n\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next.next\\n        middle = slow\\n        #reverse the second half so that the twin of the node is always n/2 nodes apart\\n        \\n\\n        #edge case only two nodes\\n        if not middle.next:\\n            return dummy.val+ middle.val\\n\\n        \'\'\'save our head, nextnode, prev\'\'\'\\n        prev = None\\n        curr= middle\\n        while curr:\\n            next_node = curr.next\\n            curr.next = prev\\n\\n            prev = curr\\n            curr= next_node\\n        \\n        #found the middle, reversed second half now i want to move evry n/2 and n add find theeir sums\\n        #how do i make first half point to reversed second half\\n        biggerTwinSum = 0\\n        fast = prev #will start at the reversed second half\\n        slow = dummy #saved head of list in dummy variable\\n        \\n        while fast:\\n            biggerTwinSum = max(biggerTwinSum, slow.val + fast.val)\\n            slow = slow.next\\n            fast = fast.next\\n           \\n        return biggerTwinSum\\n\\n        \\n\\n","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1},{"id":1310776872,"question_id":2236,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1720204209,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1310776872/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def pairSum(self, head: Optional[ListNode]) -> int:\\n        #use fast and slow method to find the middle\\n        dummy = head\\n        fast = head\\n        slow = head\\n\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next.next\\n        middle = slow\\n        #reverse the second half so that the twin of the node is always n/2 nodes apart\\n        \\n\\n        #edge case only two nodes\\n        if not middle.next:\\n            return dummy.val+ middle.val\\n\\n        \'\'\'save our head, nextnode, prev\'\'\'\\n        prev = None\\n        curr= middle\\n        while curr:\\n            next_node = curr.next\\n            curr.next = prev\\n\\n            prev = curr\\n            curr= next_node\\n        \\n        #found the middle, reversed second half now i want to move evry n/2 and n add find theeir sums\\n        #how do i make first half point to reversed second half\\n        biggerTwinSum = 0\\n        fast = prev #will start at the reversed second half\\n        slow = dummy #saved head of list in dummy variable\\n        biggerTwinSum = fast.val +slow.val #find sum of first twin\\n        while fast:\\n            slow = slow.next\\n            fast = fast.next\\n            biggerTwinSum = max(biggerTwinSum, slow.val +fast.val)\\n\\n        return biggerTwinSum\\n\\n        \\n\\n","compare_result":"0000000000000000000000000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1},{"id":1310762996,"question_id":2236,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1720203345,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1310762996/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def pairSum(self, head: Optional[ListNode]) -> int:\\n        #use fast and slow method to find the middle\\n        dummy = head\\n        fast = head\\n        slow = head\\n\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next.next\\n        middle = slow\\n        #reverse the second half so that the twin of the node is always n/2 nodes apart\\n        \\n\\n        #edge case only two nodes\\n        if not middle.next:\\n            return dummy.val+ middle.val\\n\\n        \'\'\'save our head, nextnode, prev\'\'\'\\n        prev = None\\n        returnval = middle.next\\n        while middle and middle.next:\\n\\n            if prev:\\n                prev.next = middle.next\\n            prev = middle\\n\\n            next_node = middle.next.next\\n            middle.next.next = middle\\n\\n            middle.next = next_node\\n            middle = next_node\\n        #found the middle, reversed second half now i want to move evry n/2 and n add find theeir sums\\n        #how do i make first half point to reversed second half\\n        biggerTwinSum = 0\\n        fast = returnval #will start at the reversed second half\\n        slow = dummy #saved head of list in dummy variable\\n        biggerTwinSum = fast.val +slow.val #find sum of first twin\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next\\n            biggerTwinSum = max(biggerTwinSum, slow.val +fast.val)\\n\\n        return biggerTwinSum\\n\\n        \\n\\n","compare_result":"1110000000100111111100000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1},{"id":1310762275,"question_id":2236,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1720203301,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1310762275/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def pairSum(self, head: Optional[ListNode]) -> int:\\n        #use fast and slow method to find the middle\\n        dummy = head\\n        fast = head\\n        slow = head\\n\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next.next\\n        middle = slow\\n        #reverse the second half so that the twin of the node is always n/2 nodes apart\\n        \\n\\n        #edge case only two nodes\\n        if not middle.next:\\n            return dummy.val+ middle.val\\n\\n        \'\'\'save our head, nextnode, prev\'\'\'\\n        prev = None\\n        returnval = middle.next\\n        while middle and middle.next:\\n\\n            if prev:\\n                prev.next = middle.next\\n            prev = middle\\n\\n            next_node = middle.next.next\\n            middle.next.next = middle\\n\\n            middle.next = next_node\\n            middle = next_node\\n        #found the middle, reversed second half now i want to move evry n/2 and n add find theeir sums\\n        #how do i make first half point to reversed second half\\n        biggerTwinSum = 0\\n        fast = returnval #will start at the reversed second half\\n        slow = dummy #saved head of list in dummy variable\\n        biggerTwinSum = fast.val +slow.val #find sum of first twin\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next\\n            biggerTwinSum = max(biggerSum, slow.val +fast.val)\\n\\n        return biggerTwinSum\\n\\n        \\n\\n","compare_result":"0000000000000000000000000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1},{"id":1310754942,"question_id":2236,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1720202857,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1310754942/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def pairSum(self, head: Optional[ListNode]) -> int:\\n        #use fast and slow method to find the middle\\n        dummy = head\\n        fast = head\\n        slow = head\\n\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next.next\\n        middle = slow\\n        #reverse the second half so that the twin of the node is always n/2 nodes apart\\n        \\n\\n        #edge case only two nodes\\n        if not middle.next:\\n            return dummy.val+ middle.val\\n\\n        \'\'\'save our head, nextnode, prev\'\'\'\\n        prev = None\\n        while middle and middle.next:\\n\\n            if prev:\\n                prev.next = middle.next\\n            prev = middle\\n\\n            nextNode = middle.next.next\\n            head.next.next = head\\n\\n            head.next = nextNode\\n            head = nextNode\\n        #found the middle, reversed second half now i want to move evry n/2 and n add find theeir sums\\n\\n        biggerSum = 0\\n        fast = dummy.next.next #will start at the twin\\n        slow = dummy #saved head of list in dummy variable\\n        biggerTwinSum = fast.val +slow.val #find sum of first twin\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next\\n            biggerTwinSum = max(biggerSum, slow.val +fast.val)\\n\\n        return biggerSum\\n\\n        \\n\\n","compare_result":"0000000000000000000000000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1},{"id":1310733873,"question_id":2236,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1720201587,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1310733873/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def pairSum(self, head: Optional[ListNode]) -> int:\\n        #use fast and slow method to find the middle\\n        dummy = head\\n        fast = head\\n        slow = head\\n\\n        while fast.next and fast.next.next:\\n            slow = slow.next\\n            fast = fast.next.next\\n        middle = slow\\n        #reverse the second half so that the twin of the node is always n/2 nodes apart\\n        \'\'\'save our head, nextnode, prev\'\'\'\\n        print (middle)\\n        \'\'\'prev = None\\n        while slow and head.next:\\n\\n            if prev:\\n                prev.next = head.next\\n            prev = head\\n\\n            nextNode = head.next.next\\n            head.next.next = head\'\'\'\\n","compare_result":"0000000000000000000000000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1},{"id":1306357517,"question_id":83,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1719870689,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1306357517/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"16.4 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        end = head\\n        if not head:\\n            return None\\n        while end and end.next:\\n            if end.val == end.next.val:\\n                end.next = end.next.next\\n            else:    \\n                end = end.next\\n            \\n            \\n        return head","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1},{"id":1306356447,"question_id":83,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1719870553,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1306356447/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"16.6 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        end = head\\n    \\n        while end and end.next:\\n            if end.val == end.next.val:\\n                end.next = end.next.next\\n            else:    \\n                end = end.next\\n            \\n            \\n        return head","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1},{"id":1306355970,"question_id":83,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1719870494,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1306355970/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        end = head\\n    \\n        while end and end.next:\\n            if end.val == end.next.val:\\n                end.next = end.next.next\\n            else:    \\n                end = end.next\\n            \\n            \\n            return head","compare_result":"101011001000010000000000000010000010000000000000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1},{"id":1306351473,"question_id":83,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1719869927,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1306351473/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        end = head\\n        end2 = end.next\\n        while end2:\\n            if end.val == end2.val:\\n                end.next = end.next.next\\n                end2 = end.next\\n            end = end.next\\n            end2 = end2.next\\n            \\n            return head","compare_result":"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1},{"id":1306339105,"question_id":908,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1719868449,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1306339105/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"16.5 MB","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        fast = head\\n        slow = head\\n        count = 0\\n        while fast and fast.next:\\n            fast = fast.next.next\\n            slow = slow.next\\n            count+=1\\n        print(count)\\n        \'\'\'if count %2 ==1 or count<2:\\n            slow = slow.next\'\'\'\\n            \\n        return slow","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list","has_notes":false,"flag_type":1},{"id":1306335590,"question_id":908,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1719868065,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1306335590/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"N/A","code":"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        fast = head\\n        slow = head\\n        count = 0\\n        while fast and fast.next:\\n            fast = fast.next.next\\n            slow = slow.next\\n            count+=1\\n        if count %2 ==1:\\n            slow = slow.next\\n            \\n        return slow","compare_result":"101001011001001010111001000010111111","title_slug":"middle-of-the-linked-list","has_notes":false,"flag_type":1},{"id":1303518155,"question_id":3,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719635807,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1303518155/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"16.5 MB","code":"class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        maxlen = 0\\n        seen = set()\\n        left=0\\n        #s = \\"pwwkew\\"\\n        for right in range(len(s)):\\n            while s[right] in seen:\\n                \\n                seen.remove(s[left])\\n                left+=1\\n            else:   \\n                seen.add(s[right])\\n                maxlen = max(maxlen,right-left+1)\\n        return maxlen","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1},{"id":1303478490,"question_id":782,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719631233,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1303478490/","is_pending":"Not Pending","title":"Jewels and Stones","memory":"16.5 MB","code":"class Solution:\\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\\n        jew = set(jewels)\\n        count=0\\n        for stone in stones:\\n            if stone in jew:\\n                count+=1\\n        return count","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jewels-and-stones","has_notes":false,"flag_type":1},{"id":1303471505,"question_id":383,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719630275,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/1303471505/","is_pending":"Not Pending","title":"Ransom Note","memory":"16.6 MB","code":"class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        from collections import defaultdict\\n        if len(magazine)<len(ransomNote):\\n            return False\\n        countm = defaultdict(int)\\n        \\n        for i in magazine:\\n            countm[i]+=1\\n        \\n        for r in ransomNote:\\n            if r not in countm or countm[r]<1:\\n                return False\\n            else:\\n                countm[r]-=1\\n                \\n                \\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ransom-note","has_notes":false,"flag_type":1},{"id":1303469870,"question_id":383,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719630049,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/1303469870/","is_pending":"Not Pending","title":"Ransom Note","memory":"16.6 MB","code":"class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        from collections import defaultdict\\n        \\n        countm = defaultdict(int)\\n        \\n        for i in magazine:\\n            countm[i]+=1\\n        \\n        for r in ransomNote:\\n            if r not in countm or countm[r]<1:\\n                return False\\n            else:\\n                countm[r]-=1\\n                \\n                \\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ransom-note","has_notes":false,"flag_type":1},{"id":1303369377,"question_id":1297,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719612036,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1303369377/","is_pending":"Not Pending","title":"Maximum Number of Balloons","memory":"16.8 MB","code":"class Solution:\\n    def maxNumberOfBalloons(self, text: str) -> int:\\n        from collections import Counter\\n        counts = Counter(text)\\n        balloon = Counter(\\"balloon\\")\\n        \\n        ans = float(\\"inf\\")\\n        for i in balloon:\\n            ans = min(ans, counts[i]//balloon[i])\\n        return ans\\n            ","compare_result":"111111111111111111111111111","title_slug":"maximum-number-of-balloons","has_notes":false,"flag_type":1}],"has_next":true,"last_key":"%7B%22pk%22%3A%20%7B%22N%22%3A%20%221303369377%22%7D%2C%20%22dt%22%3A%20%7B%22S%22%3A%20%222024-06-28T22%3A00%3A36.781251%2B0000%22%7D%2C%20%22sid%22%3A%20%7B%22N%22%3A%20%2214212730%22%7D%7D"}'
2024-07-19 12:00:56,960 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:56,960 [INFO] __main__.py:245 - Writing reverse-linked-list-ii/2024-07-19 10.24.30 - Accepted - runtime 34ms - memory 16.7MB.py
2024-07-19 12:00:56,960 [INFO] __main__.py:188 - Skipping reverse-linked-list-ii 2024-07-19 10.22.18 because its status is 'Wrong Answer'
2024-07-19 12:00:56,976 [INFO] __main__.py:188 - Skipping reverse-linked-list-ii 2024-07-19 10.20.02 because its status is 'Runtime Error'
2024-07-19 12:00:57,084 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:57,100 [INFO] __main__.py:245 - Writing maximum-twin-sum-of-a-linked-list/2024-07-05 13.32.04 - Accepted - runtime 341ms - memory 38.3MB.py
2024-07-19 12:00:57,100 [INFO] __main__.py:188 - Skipping maximum-twin-sum-of-a-linked-list 2024-07-05 13.30.09 because its status is 'Runtime Error'
2024-07-19 12:00:57,100 [INFO] __main__.py:188 - Skipping maximum-twin-sum-of-a-linked-list 2024-07-05 13.15.45 because its status is 'Wrong Answer'
2024-07-19 12:00:57,100 [INFO] __main__.py:188 - Skipping maximum-twin-sum-of-a-linked-list 2024-07-05 13.15.01 because its status is 'Runtime Error'
2024-07-19 12:00:57,100 [INFO] __main__.py:188 - Skipping maximum-twin-sum-of-a-linked-list 2024-07-05 13.07.37 because its status is 'Runtime Error'
2024-07-19 12:00:57,100 [INFO] __main__.py:188 - Skipping maximum-twin-sum-of-a-linked-list 2024-07-05 12.46.27 because its status is 'Runtime Error'
2024-07-19 12:00:57,407 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:57,422 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-list/2024-07-01 16.51.29 - Accepted - runtime 43ms - memory 16.4MB.py
2024-07-19 12:00:57,422 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-list/2024-07-01 16.49.13 - Accepted - runtime 47ms - memory 16.6MB.py
2024-07-19 12:00:57,422 [INFO] __main__.py:188 - Skipping remove-duplicates-from-sorted-list 2024-07-01 16.48.14 because its status is 'Wrong Answer'
2024-07-19 12:00:57,422 [INFO] __main__.py:188 - Skipping remove-duplicates-from-sorted-list 2024-07-01 16.38.47 because its status is 'Wrong Answer'
2024-07-19 12:00:57,708 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:57,708 [INFO] __main__.py:245 - Writing middle-of-the-linked-list/2024-07-01 16.14.09 - Accepted - runtime 29ms - memory 16.5MB.py
2024-07-19 12:00:57,724 [INFO] __main__.py:188 - Skipping middle-of-the-linked-list 2024-07-01 16.07.45 because its status is 'Wrong Answer'
2024-07-19 12:00:57,849 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:57,849 [INFO] __main__.py:245 - Writing longest-substring-without-repeating-characters/2024-06-28 23.36.47 - Accepted - runtime 57ms - memory 16.5MB.py
2024-07-19 12:00:57,999 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:57,999 [INFO] __main__.py:245 - Writing jewels-and-stones/2024-06-28 22.20.33 - Accepted - runtime 32ms - memory 16.5MB.py
2024-07-19 12:00:58,134 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:58,134 [INFO] __main__.py:245 - Writing ransom-note/2024-06-28 22.04.35 - Accepted - runtime 54ms - memory 16.6MB.py
2024-07-19 12:00:58,134 [INFO] __main__.py:245 - Writing ransom-note/2024-06-28 22.00.49 - Accepted - runtime 68ms - memory 16.6MB.py
2024-07-19 12:00:58,248 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:00:58,248 [INFO] __main__.py:245 - Writing maximum-number-of-balloons/2024-06-28 17.00.36 - Accepted - runtime 33ms - memory 16.8MB.py
2024-07-19 12:01:03,264 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2024-07-19 12:01:03,798 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/11" 200 None
2024-07-19 12:01:03,829 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1303332494,"question_id":1098,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719607122,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1303332494/","is_pending":"Not Pending","title":"Largest Unique Number","memory":"16.7 MB","code":"class Solution:\\n    def largestUniqueNumber(self, nums: List[int]) -> int:\\n        #idea of a set\\n        #find max element in lsit\\n        \\n        counts = defaultdict(int)\\n        \\n        for num in nums:\\n            counts[num] += 1\\n        maxi = 0\\n        for i in counts:\\n            if i >= maxi and counts[i]==1:\\n                maxi=i\\n        if maxi==0:\\n            return -1\\n        return maxi","compare_result":"111111111111111111111111111111111111111","title_slug":"largest-unique-number","has_notes":false,"flag_type":1},{"id":1303331336,"question_id":1098,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719606984,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1303331336/","is_pending":"Not Pending","title":"Largest Unique Number","memory":"16.7 MB","code":"class Solution:\\n    def largestUniqueNumber(self, nums: List[int]) -> int:\\n        #idea of a set\\n        #find max element in lsit\\n        \\n        seen = {}\\n        for num in nums:\\n            seen[num] = seen.get(num, 0)+1\\n            \\n        maxi = 0\\n        for i in seen:\\n            if i >= maxi and seen[i]==1:\\n                maxi=i\\n        if maxi==0:\\n            return -1\\n        return maxi","compare_result":"111111111111111111111111111111111111111","title_slug":"largest-unique-number","has_notes":false,"flag_type":1},{"id":1303327278,"question_id":1098,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719606529,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1303327278/","is_pending":"Not Pending","title":"Largest Unique Number","memory":"N/A","code":"class Solution:\\n    def largestUniqueNumber(self, nums: List[int]) -> int:\\n        #idea of a set\\n        #find max element in lsit\\n        \\n        seen = set()\\n        for num in nums:\\n            if num not in seen:\\n                seen.add(num)\\n            \\n            else:\\n                seen.remove(num)\\n        \\n        if len(seen)==0:\\n            return -1\\n        maxi = 0\\n        for i in seen:\\n            if i > maxi:\\n                maxi=i\\n        return maxi","compare_result":"111111111111111111111111111111111110100","title_slug":"largest-unique-number","has_notes":false,"flag_type":1},{"id":1303322479,"question_id":1354,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719606029,"status":10,"status_display":"Accepted","runtime":"1419 ms","url":"/submissions/detail/1303322479/","is_pending":"Not Pending","title":"Find Players With Zero or One Losses","memory":"71.3 MB","code":"class Solution:\\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\\n        count = defaultdict(int)\\n        lst1=[]\\n        lst2=[]\\n        for match in matches:\\n                count[match[0]]+=0\\n                count[match[1]]+=1\\n        \\n        \\n        print(count)\\n        for key,value in count.items():\\n            if value ==0:\\n                lst1.append(key)\\n            elif value ==1:\\n                lst2.append(key)\\n        return [sorted(lst1),sorted(lst2)]\\n                ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-players-with-zero-or-one-losses","has_notes":false,"flag_type":1},{"id":1303316308,"question_id":1354,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1719605373,"status":10,"status_display":"Accepted","runtime":"1479 ms","url":"/submissions/detail/1303316308/","is_pending":"Not Pending","title":"Find Players With Zero or One Losses","memory":"70.4 MB","code":"class Solution:\\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\\n        count = defaultdict(int)\\n        lst1=[]\\n        lst2=[]\\n        for match in matches:\\n            for i in range(0,len(match)-1):\\n                count[match[i]]+=0\\n                count[match[i+1]]+=1\\n        \\n        \\n        print(count)\\n        for key,value in count.items():\\n            if value ==0:\\n                lst1.append(key)\\n            elif value ==1:\\n                lst2.append(key)\\n        return [sorted(lst1),sorted(lst2)]\\n                ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-players-with-zero-or-one-losses","has_notes":false,"flag_type":1},{"id":1301265308,"question_id":1391,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719430878,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1301265308/","is_pending":"Not Pending","title":"Counting Elements","memory":"16.6 MB","code":"class Solution:\\n    def countElements(self, arr: List[int]) -> int:\\n        #check if num+ 1 is in the array\\n        #need to account for duplicatiates\\n        \\n        #take num check if num +1 is in array\\n        #if it is add that num to my set \\n        \'\'\'\\n        if i find\\n        i could use a dict\\n        add their frequecies\\n        if num is in the dict decremnet the value\\n        if less than 1 then we know that we have reached the limit\'\'\'\\n        \\n        count = 0\\n        \\n        \'\'\'my_dict = {}\\n        \\n        for i in arr:\\n            my_dict[i]=my_dict.get(i, 0)+1\\n        \\n        \\n        print(my_dict)\\n        \\n        for key in my_dict:\\n          \\n                if key+1 in my_dict:\\n                    \\n                    count+=my_dict[key]\\n              \\n        return count\'\'\'\\n        seen = set(arr)\\n        \\n        for i in arr:\\n            if i+1 in seen:\\n                count+=1\\n        return count\\n            \\n                \\n        ","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"counting-elements","has_notes":false,"flag_type":1},{"id":1301262757,"question_id":1391,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719430659,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1301262757/","is_pending":"Not Pending","title":"Counting Elements","memory":"16.7 MB","code":"class Solution:\\n    def countElements(self, arr: List[int]) -> int:\\n        #check if num+ 1 is in the array\\n        #need to account for duplicatiates\\n        \\n        #take num check if num +1 is in array\\n        #if it is add that num to my set \\n        \'\'\'\\n        if i find\\n        i could use a dict\\n        add their frequecies\\n        if num is in the dict decremnet the value\\n        if less than 1 then we know that we have reached the limit\'\'\'\\n        \\n        count = 0\\n        \\n        my_dict = {}\\n        \\n        for i in arr:\\n            my_dict[i]=my_dict.get(i, 0)+1\\n        \\n        \\n        print(my_dict)\\n        \\n        for key in my_dict:\\n          \\n                if key+1 in my_dict:\\n                    \\n                    count+=my_dict[key]\\n                   \\n                \\n            \\n        return count\\n            \\n                \\n        ","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"counting-elements","has_notes":false,"flag_type":1},{"id":1301239455,"question_id":1391,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719428778,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1301239455/","is_pending":"Not Pending","title":"Counting Elements","memory":"N/A","code":"class Solution:\\n    def countElements(self, arr: List[int]) -> int:\\n        #check if num+ 1 is in the array\\n        #need to account for duplicatiates\\n        \\n        #take num check if num +1 is in array\\n        #if it is add that num to my set \\n        \'\'\'\\n        if i find\\n        i could use a dict\\n        add their frequecies\\n        if num is in the dict decremnet the value\\n        if less than 1 then we know that we have reached the limit\'\'\'\\n        \\n        count = 0\\n        \\n        my_dict = {}\\n        \\n        for i in arr:\\n            my_dict[i]=my_dict.get(i, 0)+1\\n        \\n        \\n        print(my_dict)\\n        \\n        for key in my_dict:\\n            \\n            if key+1 in my_dict and my_dict[key+1]>0 :\\n                my_dict[key+1] -=1\\n                count+=1\\n                \\n            \\n        return count\\n            \\n                \\n        ","compare_result":"111001100001110010110100000000000000000000000000000000","title_slug":"counting-elements","has_notes":false,"flag_type":1},{"id":1301178269,"question_id":268,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719424982,"status":10,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/1301178269/","is_pending":"Not Pending","title":"Missing Number","memory":"18.5 MB","code":"class Solution:\\n    def missingNumber(self, nums: List[int]) -> int:\\n        #find len of nums\\n        seen = set(nums)\\n        for i in range(len(nums)+1):\\n            #check if num is in nums\\n            if i not in seen:\\n                return i\\n        return","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"missing-number","has_notes":false,"flag_type":1},{"id":1301164605,"question_id":268,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719424224,"status":10,"status_display":"Accepted","runtime":"1405 ms","url":"/submissions/detail/1301164605/","is_pending":"Not Pending","title":"Missing Number","memory":"17.7 MB","code":"class Solution:\\n    def missingNumber(self, nums: List[int]) -> int:\\n        #find len of nums\\n        \\n        for i in range(len(nums)+1):\\n            #check if num is in nums\\n            if i not in nums:\\n                return i\\n        return","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"missing-number","has_notes":false,"flag_type":1},{"id":1301157338,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719423830,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1301157338/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"16.4 MB","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        #check if length of str \\n\\n        seen = set()\\n        for char in sentence:\\n            if char not in seen:\\n                seen.add(char)\\n\\n        return len(seen)== 26\\n           \\n\\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301157114,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719423818,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1301157114/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"N/A","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        #check if length of str \\n\\n        seen = set()\\n        for char in sentence:\\n            if char not in seen:\\n                seen.add(char)\\n\\n        return len(seen)== 26:\\n           \\n\\n            ","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301155435,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719423723,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1301155435/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"16.5 MB","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        #check if length of str \\n\\n        seen = set()\\n        for char in sentence:\\n            if char not in seen:\\n                seen.add(char)\\n\\n        if len(seen)== 26:\\n            return True\\n        return False\\n\\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301154904,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719423694,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1301154904/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"N/A","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        #check if length of str \\n\\n        seen = set()\\n        for char in sentence:\\n            if char not in seen:\\n                seen.add(char)\\n\\n        if len(sentence)= 26:\\n            return True\\n        return False\\n\\n            ","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301150056,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719423424,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1301150056/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"N/A","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        #check if length of str \\n\\n        seen = set()\\n        for char in sentence:\\n            if char not in seen:\\n                seen.add(char)\\n\\n        if len(sentence)< 26:\\n            return False\\n        return True\\n\\n            ","compare_result":"1111111111111111111101010101010101010101010101010101010101010101010101010101010","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301126648,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719422109,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1301126648/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"N/A","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        #check if length of str \\n        if len(sentence)< 26:\\n            return False\\n        string = \\"abcdefghijklmnopqrstuvwxyz\\"\\n        sentence = set(sentence)\\n        for char in string:\\n            if char in sentence:\\n                return True\\n        \\n        return False\\n            ","compare_result":"1111111111111111111101010101010101010101010101010101010101010101010101010101010","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301124472,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719421985,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1301124472/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"N/A","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        string = \\"abcdefghijklmnopqrstuvwxyz\\"\\n        string = set(string)\\n        for char in string:\\n            if char in sentence:\\n                return True\\n        \\n        return False\\n            ","compare_result":"1000000000000000111101010101010101010101010101010101010101010101010101010101010","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1301123946,"question_id":1960,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1719421955,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1301123946/","is_pending":"Not Pending","title":"Check if the Sentence Is Pangram","memory":"N/A","code":"class Solution:\\n    def checkIfPangram(self, sentence: str) -> bool:\\n        string = \\"abcdefghijklmnopqrstuvwxyz\\"\\n        string = set(string)\\n        for char in sentence:\\n            if char in string:\\n                return True\\n        \\n        return False\\n            ","compare_result":"1000000000000000111101010101010101010101010101010101010101010101010101010101010","title_slug":"check-if-the-sentence-is-pangram","has_notes":false,"flag_type":1},{"id":1300277805,"question_id":2634,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1719352239,"status":10,"status_display":"Accepted","runtime":"344 ms","url":"/submissions/detail/1300277805/","is_pending":"Not Pending","title":"Minimum Common Value","memory":"38.8 MB","code":"class Solution:\\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\\n        #plan is to fins lcnumber in tqo lists\\n        nums2_set = set(nums2)\\n        min_num = float(\\"inf\\")\\n        curr = False\\n        for num in nums1:\\n            if num in nums2_set:\\n                min_num = min(num, min_num)\\n                curr= True\\n            \\n        if curr is False:\\n            return -1\\n        return min_num","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-common-value","has_notes":false,"flag_type":1},{"id":1300272741,"question_id":2634,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1719351571,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1300272741/","is_pending":"Not Pending","title":"Minimum Common Value","memory":"N/A","code":"class Solution:\\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\\n        #plan is to fins lcnumber in tqo lists\\n        min_num = float(\\"inf\\")\\n        curr = False\\n        for num in nums1:\\n            if num in nums2:\\n                min_num = min(num, min_num)\\n                curr= True\\n            \\n        if curr is False:\\n            return -1\\n        return min_num","compare_result":"11111111111111111111111111111111110000000","title_slug":"minimum-common-value","has_notes":false,"flag_type":1}],"has_next":true,"last_key":"%7B%22pk%22%3A%20%7B%22N%22%3A%20%221300272741%22%7D%2C%20%22dt%22%3A%20%7B%22S%22%3A%20%222024-06-25T21%3A39%3A31.325457%2B0000%22%7D%2C%20%22sid%22%3A%20%7B%22N%22%3A%20%2214212730%22%7D%7D"}'
2024-07-19 12:01:04,126 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:04,126 [INFO] __main__.py:245 - Writing largest-unique-number/2024-06-28 15.38.42 - Accepted - runtime 40ms - memory 16.7MB.py
2024-07-19 12:01:04,126 [INFO] __main__.py:245 - Writing largest-unique-number/2024-06-28 15.36.24 - Accepted - runtime 42ms - memory 16.7MB.py
2024-07-19 12:01:04,126 [INFO] __main__.py:188 - Skipping largest-unique-number 2024-06-28 15.28.49 because its status is 'Wrong Answer'
2024-07-19 12:01:04,271 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:04,271 [INFO] __main__.py:245 - Writing find-players-with-zero-or-one-losses/2024-06-28 15.20.29 - Accepted - runtime 1419ms - memory 71.3MB.py
2024-07-19 12:01:04,271 [INFO] __main__.py:245 - Writing find-players-with-zero-or-one-losses/2024-06-28 15.09.33 - Accepted - runtime 1479ms - memory 70.4MB.py
2024-07-19 12:01:04,416 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:04,416 [INFO] __main__.py:245 - Writing counting-elements/2024-06-26 14.41.18 - Accepted - runtime 38ms - memory 16.6MB.py
2024-07-19 12:01:04,416 [INFO] __main__.py:245 - Writing counting-elements/2024-06-26 14.37.39 - Accepted - runtime 36ms - memory 16.7MB.py
2024-07-19 12:01:04,416 [INFO] __main__.py:188 - Skipping counting-elements 2024-06-26 14.06.18 because its status is 'Wrong Answer'
2024-07-19 12:01:04,526 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:04,526 [INFO] __main__.py:245 - Writing missing-number/2024-06-26 13.03.02 - Accepted - runtime 100ms - memory 18.5MB.py
2024-07-19 12:01:04,541 [INFO] __main__.py:245 - Writing missing-number/2024-06-26 12.50.24 - Accepted - runtime 1405ms - memory 17.7MB.py
2024-07-19 12:01:04,682 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:04,682 [INFO] __main__.py:245 - Writing check-if-the-sentence-is-pangram/2024-06-26 12.43.50 - Accepted - runtime 43ms - memory 16.4MB.py
2024-07-19 12:01:04,682 [INFO] __main__.py:188 - Skipping check-if-the-sentence-is-pangram 2024-06-26 12.43.38 because its status is 'Runtime Error'
2024-07-19 12:01:04,682 [INFO] __main__.py:245 - Writing check-if-the-sentence-is-pangram/2024-06-26 12.42.03 - Accepted - runtime 33ms - memory 16.5MB.py
2024-07-19 12:01:04,698 [INFO] __main__.py:188 - Skipping check-if-the-sentence-is-pangram 2024-06-26 12.41.34 because its status is 'Runtime Error'
2024-07-19 12:01:04,698 [INFO] __main__.py:188 - Skipping check-if-the-sentence-is-pangram 2024-06-26 12.37.04 because its status is 'Wrong Answer'
2024-07-19 12:01:04,698 [INFO] __main__.py:188 - Skipping check-if-the-sentence-is-pangram 2024-06-26 12.15.09 because its status is 'Wrong Answer'
2024-07-19 12:01:04,698 [INFO] __main__.py:188 - Skipping check-if-the-sentence-is-pangram 2024-06-26 12.13.05 because its status is 'Wrong Answer'
2024-07-19 12:01:04,698 [INFO] __main__.py:188 - Skipping check-if-the-sentence-is-pangram 2024-06-26 12.12.35 because its status is 'Wrong Answer'
2024-07-19 12:01:05,447 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:05,463 [INFO] __main__.py:245 - Writing minimum-common-value/2024-06-25 16.50.39 - Accepted - runtime 344ms - memory 38.8MB.py
2024-07-19 12:01:05,463 [INFO] __main__.py:188 - Skipping minimum-common-value 2024-06-25 16.39.31 because its status is 'Time Limit Exceeded'
2024-07-19 12:01:10,469 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2024-07-19 12:01:10,752 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/11" 200 None
2024-07-19 12:01:10,752 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1295830440,"question_id":1603,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks","timestamp":1718988176,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1295830440/","is_pending":"Not Pending","title":"Running Sum of 1d Array","memory":"16.7 MB","code":"class Solution:\\n    def runningSum(self, nums: List[int]) -> List[int]:\\n        \'\'\'idea of prefix sum\\n        should i use a new array\\n        loop through the array\'\'\'\\n        prefix = [nums[0]]\\n        \\n        for index in range(1,len(nums)):\\n            prefix.append(nums[index] + prefix[-1])\\n        return prefix\\n            ","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"running-sum-of-1d-array","has_notes":false,"flag_type":1},{"id":1295789553,"question_id":1046,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks","timestamp":1718985460,"status":10,"status_display":"Accepted","runtime":"438 ms","url":"/submissions/detail/1295789553/","is_pending":"Not Pending","title":"Max Consecutive Ones III","memory":"17 MB","code":"class Solution:\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\n        \'\'\'sli window\\n        when we encounter a 0 decrement\'\'\'\\n        \\n        left = curr= ans = 0\\n        \\n        for right in range(len(nums)):\\n            if nums[right] == 0:\\n                curr+=1\\n            \\n            while curr> k:\\n                if nums[left] ==0:\\n                    curr-=1\\n                left+=1\\n                \\n                \\n            ans = max(ans, right - left+1)     \\n        return ans\\n            \\n       \\n                ","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"max-consecutive-ones-iii","has_notes":false,"flag_type":1},{"id":1294140382,"question_id":643,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1718852436,"status":10,"status_display":"Accepted","runtime":"882 ms","url":"/submissions/detail/1294140382/","is_pending":"Not Pending","title":"Maximum Average Subarray I","memory":"28.3 MB","code":"class Solution:\\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\\n        \'\'\'find highest average\\n        sliding window approach\\n        subarray of length k\\n        find total sum divided by k to get av\'\'\'\\n        total = 0\\n        \\n        curr=0\\n        \\n        for i in range(k):\\n            curr+= nums[i]\\n        total =curr\\n        \\n        average = curr\\n        for i in range(k, len(nums)):\\n            curr+= nums[i] - nums[i-k]\\n            \\n            total = max(total, curr)\\n        return total/k\\n               ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-i","has_notes":false,"flag_type":1},{"id":1294137546,"question_id":643,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1718852117,"status":10,"status_display":"Accepted","runtime":"922 ms","url":"/submissions/detail/1294137546/","is_pending":"Not Pending","title":"Maximum Average Subarray I","memory":"28.3 MB","code":"class Solution:\\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\\n        \'\'\'find highest average\\n        sliding window approach\\n        subarray of length k\\n        find total sum divided by k to get av\'\'\'\\n        total = 0\\n        average = 0\\n        curr=0\\n        \\n        for i in range(k):\\n            total+= nums[i]\\n            curr= total/k\\n        \\n        average = curr\\n        for i in range(k, len(nums)):\\n            total+= nums[i] - nums[i-k]\\n            curr = total/k\\n            average = max(average, curr)\\n        return average\\n               ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-i","has_notes":false,"flag_type":1},{"id":1293967271,"question_id":1019,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1718830264,"status":10,"status_display":"Accepted","runtime":"159 ms","url":"/submissions/detail/1293967271/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"18.7 MB","code":"class Solution:\\n    def sortedSquares(self, nums: List[int]) -> List[int]:\\n        \\n        \\n        result= []\\n        l=0\\n        r = len(nums)-1\\n        \\n        while l<=r:\\n            if nums[l]**2 > nums[r]**2:\\n                result.append(nums[l]**2)\\n                l+=1\\n            else: \\n                result.append(nums[r]**2)\\n                r-=1\\n                \\n        return result[::-1]\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"squares-of-a-sorted-array","has_notes":false,"flag_type":1},{"id":1293912972,"question_id":344,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1718825627,"status":10,"status_display":"Accepted","runtime":"167 ms","url":"/submissions/detail/1293912972/","is_pending":"Not Pending","title":"Reverse String","memory":"20.9 MB","code":"class Solution:\\n    def reverseString(self, s: List[str]) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify s in-place instead.\\n        \\"\\"\\"\\n        l = 0\\n        r=len(s)-1\\n        val = \\"\\"\\n        while l<r:\\n            val= s[l]\\n            s[l]= s[r]\\n            s[r] = val\\n            l+=1\\n            r-=1","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-string","has_notes":false,"flag_type":1}],"has_next":false,"last_key":""}'
2024-07-19 12:01:10,909 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:10,909 [INFO] __main__.py:245 - Writing running-sum-of-1d-array/2024-06-21 11.42.56 - Accepted - runtime 40ms - memory 16.7MB.py
2024-07-19 12:01:11,023 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:11,039 [INFO] __main__.py:245 - Writing max-consecutive-ones-iii/2024-06-21 10.57.40 - Accepted - runtime 438ms - memory 17MB.py
2024-07-19 12:01:11,349 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:11,358 [INFO] __main__.py:245 - Writing maximum-average-subarray-i/2024-06-19 22.00.36 - Accepted - runtime 882ms - memory 28.3MB.py
2024-07-19 12:01:11,362 [INFO] __main__.py:245 - Writing maximum-average-subarray-i/2024-06-19 21.55.17 - Accepted - runtime 922ms - memory 28.3MB.py
2024-07-19 12:01:11,584 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:11,584 [INFO] __main__.py:245 - Writing squares-of-a-sorted-array/2024-06-19 15.51.04 - Accepted - runtime 159ms - memory 18.7MB.py
2024-07-19 12:01:11,803 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2024-07-19 12:01:11,803 [INFO] __main__.py:245 - Writing reverse-string/2024-06-19 14.33.47 - Accepted - runtime 167ms - memory 20.9MB.py
